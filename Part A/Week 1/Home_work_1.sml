(* Home work 1*) 
(*1//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*)

fun is_older(D1:(int*int*int), D2:(int*int*int))=
    if ( ( (#1 D1) < (#1 D2) ) orelse ( ((#1 D1 ) = (#1 D2))  andalso ((#2 D1)  < (#2 D2)))  orelse (((#1 D1 ) = (#1 D2))   andalso ((#2 D1)  = (#2 D2)) andalso ((#3 D1) < (#3 D2)) ))
    then true 
    else false

(*/2/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*)
fun number_in_month(xs:(int*int*int) list , m:int)=
    if null xs 
        then 0 
    else
        if #2(hd xs) = m then 1+ number_in_month(tl xs,m) else number_in_month(tl xs , m)
(*3//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*)


fun number_in_months(ds: (int*int*int) list, ms: int list )=
    if null ms 
        then 0
    else
        number_in_month(ds,hd ms ) + number_in_months(ds,tl ms  )
(*4//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*)



fun dates_in_month(ds: (int * int * int) list, m:int )=
    if null ds
        then []
        else if m = #2(hd ds) then (hd ds) :: dates_in_month(tl ds , m) else dates_in_month(tl ds,m)

(*5//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*)
fun dates_in_months(ds: (int * int * int) list , ms:int list )=
    if null ms
        then []
    else
        dates_in_month(ds, hd ms) :: dates_in_months(ds, tl ms)
(*6//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*)

fun get_nth(ls: string list, n:int )=
    if n = 1
        then hd ls
     else get_nth(tl ls, n-1)
(*7//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*)
fun date_to_string(d:int * int * int )=
    let 
        
            val ls = ["January", "February", "March", "April","May", "June", "July", "August", "September", "October", "November", "December"]
        
            val ans = get_nth(ls, #2 d)  ^  " " ^  Int.toString(#3 d) ^  ", " ^  Int.toString(#1 d) 
     in 
        ans 
     
      end
(*8//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*)

fun number_before_reaching_sum(sum : int , ls: int list)=
    if sum <= 0 
        then 0 - 1
    else 
        1 + number_before_reaching_sum(sum - hd ls , tl ls)
(*9//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*)
fun what_month (day:int)=
    let 
        val month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    in
        number_before_reaching_sum(day, month) +1 
    end

(*10//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*)

fun month_range(d1 : int , d2 :int )=
    if d1 > d2 
        then []
    else what_month(d1) :: month_range(d1+1,d2)
(*11//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*)
fun oldest(dates:(int* int *int )list)=
    if null dates
        then NONE
    else
        let
            val tail_ans = oldest(tl dates)
        in
            if isSome tail_ans andalso is_older(valOf tail_ans, hd dates) 
                then tail_ans
            else
                SOME(hd dates)
        end
        
